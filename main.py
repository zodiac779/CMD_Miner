# -*- coding: utf-8 -*-
import json
import time
import hashlib
import requests
import threading
import queue
import sys
import argparse
from web3 import Web3
import os

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î argument ‡∏à‡∏≤‡∏Å command line
parser = argparse.ArgumentParser(description="Bitcoin Mining Simulation")
parser.add_argument("--miner", type=str, default="Capy", help="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á miner (default: Capy)")
parser.add_argument("--threads", type=int, default=4, help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô threads ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡∏∏‡∏î (default: 4)")
args = parser.parse_args()

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Miner ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Threads ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∏‡∏î
print(f"\nüöÄ Starting Miner: {args.miner}")
print(f"üîÑ Using {args.threads} Threads\n")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î ABI ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
abi_file = "abi.json"
if os.path.exists(abi_file):
    with open(abi_file) as f:
        DaAbi = json.load(f)
else:
    raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {abi_file}! ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Web3 client ‡∏î‡πâ‡∏ß‡∏¢ RPC URL ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
w3 = Web3(Web3.HTTPProvider("https://rpc-l1.inan.in.th"))

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î address ‡∏Ç‡∏≠‡∏á smart contract
contract_address = '0x5087e30Ce9307D1e087400B367C2eb1c6804f090'
contract = w3.eth.contract(address=contract_address, abi=DaAbi)

# ‚úÖ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö current block ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
latest_block = None
progress_file = "currentblock.json"

# ‚úÖ ‡πÉ‡∏ä‡πâ queue ‡πÄ‡∏Å‡πá‡∏ö nonce ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
result_queue = queue.Queue()

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á hash rate ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
def format_hash_rate(rate):
    if rate >= 1e6:
        return f"{rate / 1e6:.2f} MH/s"
    elif rate >= 1e3:
        return f"{rate / 1e3:.2f} kH/s"
    else:
        return f"{rate:.2f} H/s"

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å block number ‡πÅ‡∏•‡∏∞ nonce ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
def save_current_progress(block_number, nonce):
    with open(progress_file, "w") as f:
        json.dump({"block_number": block_number, "nonce": nonce}, f)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ nonce ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
def load_last_nonce():
    if os.path.exists(progress_file):
        try:
            with open(progress_file, "r") as f:
                data = json.load(f)
                return data.get("block_number"), data.get("nonce", 0)
        except json.JSONDecodeError:
            pass  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ç‡∏∏‡∏î‡∏à‡∏≤‡∏Å nonce 0 ‡πÉ‡∏´‡∏°‡πà
    return None, 0  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å nonce 0

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï current block ‡πÅ‡∏ö‡∏ö background
def update_current_block():
    global latest_block
    while True:
        try:
            latest_block = int(contract.functions.currentBlock().call())
        except Exception as e:
            print("Error updating current block:", e)
        time.sleep(1)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hash Worker (‡∏Ç‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Multi-threading)
def hash_worker(block_data, difficulty, start_nonce, step, block_number):
    target = "0" * difficulty
    nonce = start_nonce
    start_time = time.time()

    while True:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hash
        hash_val = hashlib.sha256((block_data + str(nonce)).encode()).hexdigest()
        if hash_val.startswith(target):
            elapsed_time = time.time() - start_time
            hash_rate = nonce / elapsed_time if elapsed_time > 0 else 0
            result_queue.put((nonce, hash_val))
            print(f"\n‚úÖ Block Mined! Nonce: {nonce}, Hash: {hash_val}")
            print(f"Time Taken: {elapsed_time:.2f} seconds")
            print(f"Hash Rate: {format_hash_rate(hash_rate)}\n")
            return
        
        nonce += step  # ‡πÉ‡∏ä‡πâ step ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ thread ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì nonce ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô

        # ‚úÖ ‡∏ó‡∏∏‡∏Å ‡πÜ **1,000,000 nonce** ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ block ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if nonce % 1_000_000 == 0:
            if latest_block is not None and latest_block != block_number:
                print(f"\n‚ùå Block {block_number} ‡∏ñ‡∏π‡∏Å‡∏Ç‡∏∏‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß! (Last nonce: {nonce}) ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà\n")
                return

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ nonce ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            save_current_progress(block_number, nonce)

            # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ Hash Rate
            sys.stdout.write("\033[K")
            print(f"Current hash rate: {format_hash_rate(nonce / (time.time() - start_time))}", end="\r", flush=True)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î
def mine_block(block_data, difficulty, block_number, start_nonce=0):
    threads = []
    for i in range(args.threads):
        t = threading.Thread(target=hash_worker, args=(block_data, difficulty, start_nonce + i, args.threads, block_number))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ nonce ‡πÅ‡∏•‡∏∞ hash ‡∏ó‡∏µ‡πà‡∏Ç‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å Queue
    if not result_queue.empty():
        return result_queue.get()
    return None, None

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î
def simulate_mining():
    while True:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• block number ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏à‡∏≤‡∏Å smart contract
        block_number = int(contract.functions.currentBlock().call())
        difficulty = int(contract.functions.currentDifficulty().call())

        # ‡πÇ‡∏´‡∏•‡∏î nonce ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô block ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ nonce ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        last_block, last_nonce = load_last_nonce()
        start_nonce = last_nonce if last_block == block_number else 0
        
        print(f"Current Block to Mine: {block_number} | Difficulty: {difficulty}")

        block_data = f"Block-{block_number}"
        nonce, hash_val = mine_block(block_data, difficulty, block_number, start_nonce)
        
        # ‡∏ñ‡πâ‡∏≤ mining ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞ block ‡∏ñ‡∏π‡∏Å‡∏Ç‡∏∏‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏£‡∏≠ block ‡πÉ‡∏´‡∏°‡πà
        if nonce is None:
            time.sleep(1)
            continue

        payload = {
            "miner": args.miner,  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ miner ‡∏à‡∏≤‡∏Å arguments
            "blockNumber": block_number,
            "nonce": nonce,
            "hash": hash_val
        }

        try:
            response = requests.post("http://mining-hook-test.vercel.app/submit", json=payload)
            data = response.json()
            print("Server Response:", data)
        except Exception as e:
            print("Error Submitting Block:", e)

        # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ smart contract ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó block number ‡πÉ‡∏´‡∏°‡πà
        print("Waiting for new block update...\n")
        while True:
            new_block_number = int(contract.functions.currentBlock().call())
            if new_block_number != block_number:
                print(f"New block detected: {new_block_number}. Restarting mining...\n")
                break
            time.sleep(1)

if __name__ == "__main__":
    # ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï current block ‡πÅ‡∏ö‡∏ö background
    block_thread = threading.Thread(target=update_current_block, daemon=True)
    block_thread.start()
    
    simulate_mining()
